#!/bin/bash
# docker_nanocall_v0.7.4 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {
    set -e -x -o pipefail # Makes error handling easier
    echo "Value of fast5file: '$fast5file'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    dx download "$fast5file" -o fast5file

    # Fill in your application code here.

     # Make a data directory to mount into the Docker container
    mkdir -p /data/

    # Download the file into the data directory
    dx download "$fast5file" -o /data/fast5file.fast5  

    # Mount the /data/ directory to /data in the container and run
    dx-docker run -v /data/:/data quay.io/biocontainers/nanocall /data/fastafile.fasta > $fastafile

    # Recommended alternative (pull from immutable image ID) when possible
    # dx-docker run -v /data/:/data quay.io/ucsc_cgl/samtools@sha256:3b9ab37fbe2da27bb8067be122fc072d99e35406f293923a30d627477e0770b0 faidx /data/fastafile.fasta
    
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    fastafile=$(dx upload fastafile --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output fastafile "$fastafile" --class=file
}
